#!/usr/bin/env bash
# generate markdown document file for bash script

# shellcheck disable=SC1091
# shellcheck disable=SC1090

# Determine script path
SCRIPT_PATH=$(dirname "$0")				# relative
SCRIPT_PATH=$(cd "$SCRIPT_PATH" && pwd)	# absolutized and normalized
if [[ -z "$SCRIPT_PATH" ]]
then
	# error; for some reason, the path is not accessible
	# to the script (e.g. permissions re-evaled after suid)
	exit 1  # fail
fi

# Public: usage example
#
# Print usage example of shelldoc 
#
# `$0` - script name
#
# **Examples**
#
#   usage
#
# **Returns**
#
# nothing, but print usage text
function usage() {
	cat << EOF
Usage: $0 --in <filename_script> --out <filename_document> --header "<header>" --desc "<description>"
	[--access <Public|Internal|Deprecated>]

	-h, --help			show help text
	--in				input script file
	--out				output document file
	--header			document header
	--desc				document description
	--access			filter by access level (Public, Internal, Deprecated)
EOF
}

# Internal: check arguments
#
# `$1` - option
# `$2` - argument
# 
# **Examples**
#
#   checkargs "--test" "test"
#
# **Returns**
#
# `0` - if success
# `1` - exit if fail
function checkargs() {
	if [[ ${2} =~ ^-.*$ ]]; then
		echo "Illegal argument ${2} in option ${1}"
		usage
		exit 1
	fi
	if [ -z "$2" ]; then
		echo "Option ${1} is null"
		usage
		exit 1
	fi
	return 0
}

# Public: Create a markdown doc for shell script.
#
# `--in` - input script file
# `--out` - output doc file
# `--header` - header of the doc file
# `--desc` - description of the script in doc file
# `--access` - [optional] access for script. Added at the beginning of the function comment
# 
# **Examples**
#
#   shelldoc --in input.sh --out out.md --header "My awesome script" --desc "The great description"
#
# **Returns**
#
# `0` - if success
# `1` - exit if fail
function run_shelldoc() {
	ACCESS_ARRAY=("Public", "Internal", "Deprecated")

	while [ -n "${1}" ]
	do
		case "${1}" in
			--in)
				checkargs "${1}" "${2}"
				local shelldoc_in="${2}"
				shift
			;;
			--out)
				checkargs "${1}" "${2}"
				local shelldoc_out="${2}"
				shift
			;;
			--header)
				checkargs "${1}" "${2}"
				local shelldoc_header="${2}"
				shift
			;;
			--desc)
				checkargs "${1}" "${2}"
				local shelldoc_desc="${2}"
				shift
			;;
			--access)
				checkargs "${1}" "${2}"
				local shelldoc_access="${2}"
				shift
			;;
			-h|--help)
				usage
				exit 0
			;;
			*)
				echo "${1} is not an option"
				usage
				exit 1
			;;
		esac
		shift
	done

	for param in shelldoc_in shelldoc_out shelldoc_header shelldoc_desc
	do
		if [ -z ${!param} &> /dev/null ]
		then
			echo "The parameter is not set: --$(echo ${param} | cut -d "_" -f "2" )"
			usage
			exit 1
		fi
	done

	echo "--in: ${shelldoc_in}"
	echo "--out: ${shelldoc_out}"
	echo "--header: ${shelldoc_header}"
	echo "--desc: ${shelldoc_desc}"
	echo "--access: ${shelldoc_access}"
	
	if [ ! -z ${shelldoc_access} ]
	then
		if [[ ! ${ACCESS_ARRAY[*]} =~ "${shelldoc_access}" ]]
		then
			echo "The access should be: ${ACCESS_ARRAY[*]}"
			exit 1
		fi
	fi

	# Declare neccesary scripts
	tomdoc_script="${SCRIPT_PATH}/tomdoc.sh/tomdoc.sh"
	toc_script="${SCRIPT_PATH}/github-markdown-toc/gh-md-toc"

	if [[ ! -z ${shelldoc_access} ]]
	then
		${tomdoc_script} --access "${shelldoc_access}" --markdown "${shelldoc_in}" > "${shelldoc_out}"
	else
		${tomdoc_script} --markdown "${shelldoc_in}" > "${shelldoc_out}"
	fi
	toc=$(${toc_script} ${shelldoc_out})
	echo -e "# ${shelldoc_header}\n\n${shelldoc_desc}\n\n${toc}\n\n$(cat ${shelldoc_out})" > "${shelldoc_out}"
	sed -i "/\[gh-md-toc\]/d" ${shelldoc_out}
}

run_shelldoc "$@"
